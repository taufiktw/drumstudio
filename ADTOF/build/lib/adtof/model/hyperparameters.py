from adtof import config
from adtof.config import update

# TODO: Change the dictionnary to a @dataclass
default = {
    "labels": config.LABELS_5,  # Classes to predict
    "sampleWeight": config.WEIGHTS_5,  # Weights applied to the samples depending on the classes during training
    "emptyWeight": 1,  # weight of a sample without any onset
    "sampleRate": 100,  # sample rate of the predictions
    "diff": True,  # stacking the spectrogram input with its first order difference
    "samplePerTrack": 1,  # DEPRECATED (ALWAYS 1): Number of training sequence per track extracted before going to the next track during training
    "trainingSequence": 412,  # How many samples are in the target for each sequence in the batch. The number of frames in input will be compute depending on the frame-level or tatum-level architecture
    "batchSize": 8,  # How many training sequences per minibatch.
    "context": 9,  # Number of samples given in context for the RNN (9 is the minimum because it is the reception field of the CNN, above this value overlapping windows are taken fron the CNN output) TODO: should the concatenation be before or after?
    "labelOffset": 1,  # How many samples to offset the ground truth labels to make sure the attack is not missed
    "labelRadiation": 1,  # How many samples from the target have a non-null value
    "learningRate": 0.001,  # Learning rate
    "normalize": False,  # Normalizing the network input per track
    "architecture": "CRNN",  # What model architecture is used
    "fmin": 20,  # Min frequency limit to the Fourier transform
    "fmax": 20000,  # Max frequency limit to the Fourier transform
    "bandsPerOctave": 12,  #  Number of filter bands per octave computed from the FFT as input
    "n_channels": 1,  # mono or stereo
    "validation_epoch": 10,  # how many training sequence per track of the validation set has to be seen to consider an epoch
    "training_epoch": 10,  # how many training sequence per track of the training set has to be seen to consider an epoch
    "reduce_patience": 10,  # how many epoch without improvement on validation before reducing the lr
    "stopping_patience": 25,  # how many epoch without improvement on validation before stopping the training
    "peakThreshold": 0.1,  # peakThreshold computed on the validation set
    "conv_Filter": [64, 64, 32, 32],  # number of filters in each convolutional layer
    "GRU_units": 50,  # number of units in each bi-directional GRU layer
}


models = {
    "Frame_RNN": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": [60, 60, 60],
            "n_channels": 1,  # mono or stereo
            "conv_Filter": [32, 64],
            "regulateSamplingProbability": 0.7,
            "peakThreshold": [
                0.22000000000000003,
                0.24000000000000002,
                0.32000000000000006,
                0.22000000000000003,
                0.30000000000000004,
            ],
        },
        default,
    ),
    "crnn-all": default,
    "crnn-ptTMIDT": default,
    "crnn-TMIDT": update(
        {
            "validation_epoch": 0.5,
            "training_epoch": 0.5,
            "reduce_patience": 5,
            "stopping_patience": 10,
        },
        default,
    ),
    "crnn-ADTOF": update({"learningRate": 0.0005, "validation_epoch": 1, "training_epoch": 1}, default),
    # Add context frames for the RNN (didn't improve)
    "crnn-ADTOF_context": update(
        {
            "context": 13,
            "learningRate": 0.0005,
            "validation_epoch": 1,
            "training_epoch": 1,
        },
        default,
    ),
    # Add more validation and change the sampling (not displayed in parameters) to all random without replacing (improved)
    "crnn-ADTOF_context_sampling": update(
        {
            "context": 13,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 1,
        },
        default,
    ),
    # Add even more validation (didn't improve, but did not change execution time by mutch, I recommend val of 8 to make it identical to the training epoch)
    "crnn-ADTOF_context_sampling2": update(
        {
            "context": 13,
            "learningRate": 0.0005,
            "validation_epoch": 12,
            "training_epoch": 1,
        },
        default,
    ),
    # Add a higher resolution of the input and drop the diff (didn't improve),
    "crnn-ADTOF_inputBands": update(
        {
            "diff": False,
            "context": 13,
            "learningRate": 0.0005,
            "bandsPerOctave": 24,
            "validation_epoch": 8,
            "training_epoch": 1,
        },
        default,
    ),
    # Change the offset (didn't improve). I recommend an offset >=1 to make sure the onset is caught (especially if annotated a bit late) and offset <6 to give all the meaningfull context to the CRNN
    "crnn-ADTOF_offset6": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 1,
        },
        default,
    ),
    # Increase batch size to increase stockasticity when learning, increase the size of the epoch to keep the same number of steps before validation.
    # The results seems slightly overfitted, but the training went further and improved the performance on the validation set, I recommande using a batch size of 16
    "crnn-ADTOF_batch": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 4,
            "batchSize": 32,
        },
        default,
    ),
    # Test peakpicking with multiple thresholds (slightly better on the test data too!)
    "crnn-ADTOF_batchMPP": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 4,
            "batchSize": 32,
            "multiplePPThreshold": True,
        },
        default,
    ),
    # increase the model capacity, did not work (should we try with larger batch too?)
    "crnn-ADTOF_capacity": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 2,
            "batchSize": 16,
            "conv_Filter": [32, 32, 64, 64],
            "GRU_units": 64,
        },
        default,
    ),
    # Test how well radiation works: Without it, the results are way worse.
    "crnn-ADTOF_radiation": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 2,
            "batchSize": 16,
            "conv_Filter": [32, 32, 64, 64],
            "GRU_units": 64,
            "labelRadiation": 0,
        },
        default,
    ),
    # Test by changing the "removeStart" procedure (not parametrized). P is slightly higher, R is slightly lower, F is the same.
    "crnn-ADTOF_fullTracks": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 4,
            "batchSize": 32,
            "multiplePPThreshold": True,
        },
        default,
    ),
    # Test to train without all tracks with a score <70. Didn't change the results on "all"
    "crnn-ADTOF_70only": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 4,
            "batchSize": 32,
            "multiplePPThreshold": True,
        },
        default,
    ),
    "crnn-ADTOFYT": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 8,
            "training_epoch": 4,
            "batchSize": 32,
            "multiplePPThreshold": True,
        },
        default,
    ),
    "crnn-ADTOFALL_stdConv": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "conv_Filter": [32, 32, 64, 64],
        },
        default,
    ),
    "crnn-ADTOFALL_stdGRU": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
        },
        default,
    ),
    "crnn-ALLBOOST0.7": update(
        {
            "diff": False,
            # "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_context": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": [60, 60, 60],
            "conv_Filter": [32, 64],
            "regulateSamplingProbability": 0.7,
            "peakThreshold": [
                0.18000000000000002,
                0.18000000000000002,
                0.3400000000000001,
                0.22000000000000003,
                0.24000000000000002,
            ],
        },
        default,
    ),
    "crnn_ablation": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_librosa": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_madmom": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_stereoReuse": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "n_channels": 2,  # mono or stereo
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_stereoAugmentation": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "dataAugmentation": True,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "n_channels": 2,  # mono or stereo
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_stretchSTD": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "dataAugmentation": True,
            "reverseStereoProbability": 0,
            "stretchSTD": 0.1,
            "shuffleProbability": 0,
            "mixupAlpha": 0,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": [60, 60, 60],
            "n_channels": 1,  # mono or stereo
            "conv_Filter": [32, 64],
            "regulateSamplingProbability": 0.7,
            "peakThreshold": [
                0.22000000000000003,
                0.24000000000000002,
                0.32000000000000006,
                0.22000000000000003,
                0.30000000000000004,
            ],
        },
        default,
    ),
    "crnn_stretchShuffle": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "dataAugmentation": True,
            "reverseStereoProbability": 0,
            "stretchSTD": 0.1,
            "shuffleProbability": 1,
            "mixupAlpha": 0,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": [60, 60, 60],
            "n_channels": 1,  # mono or stereo
            "conv_Filter": [32, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_depthScaling": update(
        {
            "diff": False,
            "context": None,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            # "dataAugmentation": False,
            "reverseStereoProbability": 0,
            "stretchSTD": 0.1,
            "shuffleProbability": 0,
            "mixupAlpha": 0,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "searchSpace": {
                "conv_Filter": [[32], [32, 64], [32, 64, 128]],
                "GRU_units": [[60, 60], [60, 60, 60], [60, 60, 60, 60]],
                "dataAugmentation": [True, False],
            },
            "n_channels": 1,  # mono or stereo
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_mixup": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 16 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "dataAugmentation": True,
            "reverseStereoProbability": 0,
            "stretchSTD": 0,
            "mixupAlpha": 0.2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "n_channels": 1,  # mono or stereo
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_mixupStretch": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "dataAugmentation": True,
            "reverseStereoProbability": 0,
            "stretchSTD": 0.1,
            "mixupAlpha": 0.2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "n_channels": 1,  # mono or stereo
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_stereoNoContext": update(
        {
            "diff": False,
            # "context": 9,
            # "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "min_steps_per_epoch": 16,  # 13 steps * 32 batchSize * 4s = 30min
            "min_validation_steps": 16,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "n_channels": 2,  # mono or stereo
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_context_tmidt": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_context_tmidt-valAdtofAll": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_regu": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
            "lambdaRegularizer": 0.0001,
        },
        default,
    ),
    "crnn_batch": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 10,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn-rad2-ALLBOOST0.7": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "labelRadiation": 2,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn-class-ALLBOOST0.7": update(
        {
            "diff": False,
            "sampleWeight": None,
            "classWeight": {i: v for i, v in enumerate(config.WEIGHTS_5)},
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_scaleParams": update(
        {
            "diff": False,
            "context": 13,
            "labelOffset": 6,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "GRU_units": lambda a: [120 * a] * int(6 * a),
            "conv_Filter": [32, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_tatum4-ADTOFALL": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 4,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 4,  # 4 bars containing 4 beats with 4 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "peakMinDistance": 0,
        },
        default,
    ),
    "crnn_tatum12-ADTOFALL": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
        },
        default,
    ),
    "crnn_tatum12": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "labelRadiation": 0,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_tatum4-ALLBOOST0.7": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 4,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 4,  # 4 bars containing 4 beats with 12 tatums
            "labelRadiation": 0,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "crnn_GTtatum12*-ALLBOOST0.7": update(
        {
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "samePadding": True,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": True,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "labelRadiation": 0,
            "GRU_units": 60,
            "conv_Filter": [32, 32, 64, 64],
            "regulateSamplingProbability": 0.7,
            "tempoInterval": [75, 250],
        },
        default,
    ),
    "cnn-SelfAtt_tatum12-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_l2-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 2,
            "reduce_patience": 5,
            "stopping_patience": 10,
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_DF-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [64, 64, 32, 32],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_PE-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
            "pos_encoding": "linear",
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_batch16-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0001,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 16,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
            "pos_encoding": "linear",
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_batch16_PEReduced-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0001,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 16,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
            "pos_encoding": "linear",
            "positional_encoding_weight": "reduced",
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_norm-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0001,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 16,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
            "pos_encoding": "linear",
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_batch8-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0001,
            "validation_epoch": 4,
            "training_epoch": 1,
            "batchSize": 8,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
            "pos_encoding": "linear",
        },
        default,
    ),
    "cnn-SelfAtt_tatum12": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
            "pos_encoding": "linear",
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_tatum12_stdPE-ALLBOOST0.7": update(
        {
            "architecture": "CNN-SelfAtt",
            "conv_Filter": [32, 32, 64, 64],
            "diff": False,
            "context": 9,
            "labelOffset": 0,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "tatumSubdivision": 12,
            "GTBeats": False,
            "trainingSequence": 4 * 4 * 12,  # 4 bars containing 4 beats with 12 tatums
            "samePadding": True,
            "labelRadiation": 0,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "reduce_patience": 5,
            "stopping_patience": 10,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt-ADTOFALL": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
        },
        default,
    ),
    "cnn-SelfAtt_linearPE-ALLBOOST0.7": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "regulateSamplingProbability": 0.7,
            "pos_encoding": "linear",
        },
        default,
    ),
    "cnn-SelfAtt_valid-ALLBOOST0.7": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "fmin": 30,
            "fmax": 15000,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_batch-ALLBOOST0.7": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 8,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_hl-ALLBOOST0.7": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 8,
            "num_attention_layers": 8,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_seqL-ALLBOOST0.7": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "trainingSequence": 812,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_CV": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_L": update(
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 10,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_CV_tmidt": update(  # Hack to load model for refinment
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 4,
            "training_epoch": 2,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "regulateSamplingProbability": 0.7,
        },
        default,
    ),
    "cnn-SelfAtt_CVWait": update(  # Hack to load model for refinment
        {
            "architecture": "CNN-SelfAtt",
            "diff": False,
            "conv_Filter": [32, 32, 64, 64],
            "learningRate": 0.0005,
            "validation_epoch": 25,
            "training_epoch": 25,
            "batchSize": 32,
            "multiplePPThreshold": True,
            "num_attention_heads": 5,
            "num_attention_layers": 5,
            "regulateSamplingProbability": 0.7,
            "reduce_patience": 10,  # how many epoch without improvement on validation before reducing the lr
            "stopping_patience": 21,  # how many epoch without improvement on validation before stopping the training
        },
        default,
    )
    # TODO "crnn-ADTOF_stereo":
}
